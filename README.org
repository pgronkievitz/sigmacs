#+title: Emacs configuration

* Package management
#+name: elpaca
#+begin_src elisp
    ;; Bootstrap Elpaca
    (declare-function elpaca-generate-autoloads "elpaca")
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (when-let ((elpaca-repo (expand-file-name "repos/elpaca/" elpaca-directory))
           (elpaca-build (expand-file-name "elpaca/" elpaca-builds-directory))
           (elpaca-target (if (file-exists-p elpaca-build) elpaca-build elpaca-repo))
           (elpaca-url  "https://www.github.com/progfolio/elpaca.git")
           ((add-to-list 'load-path elpaca-target))
           ((not (file-exists-p elpaca-repo)))
           (buffer (get-buffer-create "*elpaca-bootstrap*")))
      (condition-case-unless-debug err
      (progn
        (unless (zerop (call-process "git" nil buffer t "clone" elpaca-url elpaca-repo))
          (error "%s" (list (with-current-buffer buffer (buffer-string)))))
        (byte-recompile-directory elpaca-repo 0 'force)
        (require 'elpaca)
        (elpaca-generate-autoloads "elpaca" elpaca-repo)
        (kill-buffer buffer))
    ((error)
     (delete-directory elpaca-directory 'recursive)
     (with-current-buffer buffer
       (goto-char (point-max))
       (insert (format "\n%S" err))
       (display-buffer buffer)))))
    (require 'elpaca-autoloads)
    (add-hook 'after-init-hook #'elpaca-process-queues)
    (elpaca (elpaca :host github :repo "progfolio/elpaca"))
    (setq package-enable-at-startup nil)


    (elpaca use-package (require 'use-package))
#+end_src
* Keybindings
#+name: meow
#+begin_src elisp
(setq evil-want-keybinding nil)
(elpaca-use-package (evil :type git :host github :repo "emacs-evil/evil") :demand t :config (evil-mode 1))
(elpaca-use-package (evil-collection :type git :host github :repo "emacs-evil/evil-collection") :demand t :config (evil-collection-init) :after evil)
(elpaca-use-package (evil-surround :type git :host github :repo "emacs-evil/evil-surround") :demand t :config (global-evil-surround-mode 1) :after evil)
#+end_src
* General
#+begin_src elisp :tangle init.el :noweb yes
          <<elpaca>>
          <<meow>>
              (load-theme 'modus-operandi)

              (setq inhibit-startup-screen t
                inhibit-startup-message t
                inhibit-startup-echo-area-message t
                initial-scratch-message nil
                frame-title-format nil
                use-file-dialog nil
                use-dialog-box nil
                pop-up-windows nil
                indicate-empty-lines nil
                cursor-in-non-selected-windows nil
                initial-major-mode 'text-mode
                default-major-mode 'text-mode
                font-lock-maximum-size nil
                confirm-nonexistent-file-or-buffer nil
                completion-styles '(basic substring)
                org-return-follows-link t)
            (unless (display-graphic-p)
              (xterm-mouse-mode 1)
              (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
              (global-set-key (kbd "<mouse-4>") 'scroll-up-line))
            (if (fboundp 'scroll-bar-mode)
                (set-scroll-bar-mode nil))
            (if (fboundp 'tool-bar-mode)
                (tool-bar-mode -1))
            (if (display-graphic-p)
                (menu-bar-mode t)
                (menu-bar-mode -1))
            (windmove-default-keybindings)
            (fset 'yes-or-no-p 'y-or-n-p)
            (setq-default indent-tabs-mode nil)
            (setq-default tab-width 4)
            (temp-buffer-resize-mode)
            (setq temp-buffer-max-height 8)
            (setq window-min-height 1)
            (prefer-coding-system 'utf-8)
            (set-default-coding-systems 'utf-8)
            (set-terminal-coding-system 'utf-8)
            (set-keyboard-coding-system 'utf-8)
            (set-language-environment 'utf-8)
            (require 'uniquify)
            (setq uniquify-buffer-name-style 'reverse
              uniquify-separator " | "
              uniquify-after-kill-buffer-p t
              uniquify-ignore-bufers-re "^\\*")
            (elpaca-use-package counsel :demand t)
            (elpaca (nano-emacs :type git :host github :repo "rougier/nano-emacs")
              :demand t
              :config
              (setq nano-font-family-monospaced "Agave Nerd Font Mono"
                    nano-font-family-proportional "Merriweather"
                    nano-font-size 14)
              (require 'nano-base-colors)
              (require 'nano-colors)
              (require 'nano-faces)
              (require 'nano-theme)
              (require 'nano-theme-light)
              (require 'nano-help)
              (require 'nano-layout)
              (require 'nano-session)
              (require 'nano-modeline))
            (elpaca (which-key :type git :host github :repo "justbur/emacs-which-key")
                :init
                (which-key-mode)
                (which-key-setup-side-window-bottom))
            (elpaca '(vertico :type git :host github :repo "minad/vertico")
              :init
              (vertico-mode)
              (setq vertico-scroll-margin 0
                    vertico-count 20
                    vertico-resize t
                    vertico-cycle t))
          (savehist-mode)
          (elpaca-use-package (orderless :type git :host github :repo "oantolin/orderless")
            :ensure t
            :init
            (setq completion-styles '(orderless basic))
            (setq completion-category-overrides '((file (styles basic partial-completion)))))
(elpaca-use-package (marginalia :type git :host github :repo "minad/marginalia")
                    :bind (:map minibuffer-local-map
                           ("M-A" . marginalia-cycle))
                    :init (marginalia-mode))
(elpaca-use-package (consult :type git :host github :repo "minad/consult")
                      ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key (kbd "M-.")
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  )
;; (after )
(elpaca-use-package (nix-mode :type git :host github :repo "nixos/nix-mode")
                    :defer t
                    :mode "\\.nix\\'")
(elpaca-use-package eglot
    :config
    (add-to-list 'eglot-server-programs '(nix-mode . ("rnix-lsp")))
    (add-hook 'python-mode-hook 'eglot-ensure)
    (add-to-list 'eglot-server-programs '(python-mode . ("pyright")))
    (add-hook 'markdown-mode-hook 'eglot-ensure)
    (add-to-list 'eglot-server-programs '(markdown-mode . ("marksman")))
    (add-hook 'elixir-mode-hook 'eglot-ensure)
    (add-to-list 'eglot-server-programs '(elixir-mode "elixir-ls")))
#+end_src
